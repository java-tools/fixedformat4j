  ------
  A Java API for working with fixed formatted textfiles
  ------
  Jacob von Eyben
  ------

Fixedformat4j

  Fixedformat4j is an easy to use Java framework for working with fixed formatted text files. By annotating
  your code you can setup the offsets and format for your instructions when reading/writing to and from fixed format files.

  Fixedformat4j handles the following build in datatypes:
  * String
  * Character
  * Long
  * Integer
  * Double
  * Float
  * Date
  * Boolean
  * BigDecmial

  At the same time it is straight forward to write and plugin your own formatters for custom datatypes.

* Getting started

  To start using Fixedformat4j you only have to annotate your getter methods and use the FixedFormatManager to load and
  export your fixedformat text according to your annotation instructions.

  A sample can be seen here:

+--
@Record
public class MyRecord {

  private String stringData;
  private Integer integerData;
  private Date dateData;
  private BigDecimal bigDecimalData;


  @Field(offset = 1, length = 10, align = Align.RIGHT, paddingChar = ' ')
  public String getStringData() {
    return stringData;
  }

  public void setStringData(String stringData) {
    this.stringData = stringData;
  }

  @Field(offset = 11, length = 5, align = Align.RIGHT, paddingChar = '0')
  public Integer getIntegerData() {
    return integerData;
  }

  public void setIntegerData(Integer integerData) {
    this.integerData = integerData;
  }

  @Field(offset = 16, length = 8)
  public Date getDateData() {
    return dateData;
  }

  public void setDateData(Date dateData) {
    this.dateData = dateData;
  }

  @Field(offset = 24, length = 10, align = Align.RIGHT, paddingChar = '0')
  public BigDecimal getBigDecimalData() {
    return bigDecimalData;
  }

  public void setBigDecimalData(BigDecimal bigDecimalData) {
    this.bigDecimalData = bigDecimalData;
  }
}
+--

  This annotated class can now be loaded and exported using a FixedFormatManager

+--
...
  //setup testdata
  final String MY_RECORD_DATA = "some text +012320080525+000120120";
  Calendar someDay = Calendar.getInstance();
  someDay.set(2008, 4, 25, 0, 0, 0); //month is zerobased, hench 4 equals May
  someDay.set(Calendar.MILLISECOND, 0);

  //create instance of manager
  FixedFormatManager = manager = new FixedFormatManagerImpl();

  //load and assert that the loaded data is correct
  MyRecord loadedRecord = manager.load(MyRecord.class, MY_RECORD_DATA);
  Assert.equals("some text ", loadedRcord.getStringData());
  Assert.equals(new Integer(123), loadedRcord.getIntegerData());
  Assert.equals(someday, loadedRcord.getDateData());
  Assert.equals(new BigDecimal(12.012), loadedRcord.getBigDecimalData());

  //an export should bring back the exact same string as we loaded
  Assert.assertEquals(MY_RECORD_DATA, manager.export(loadedRecord));

...
+--

* Tutorials

  * {{{fiveMinutesTutorial.html}5 minutes tutorial}} on how to read and write fixed formatted files using fixedformat4j.

  * Creating custom formatter to handle custom datatypes (TBD)

  * 