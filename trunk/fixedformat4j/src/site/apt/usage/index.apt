  ------
  Usage
  ------
  Jacob von Eyben
  ------

Usage

* Overview

  To read and write text to and from java objects you will annotate your java object with instructions
  on where data is located in the string and how to translate the data into meaningful objects.

  You will use an instance of the FixedFormatManager to load and export the data to and from string representation.

  Fixedformat4j rely on your java object adhere to the following conventions for being able to
  load and export data:

  [[1]] A class that is to be used in fixedformat4j has to be annotated with the Record annotation.

  [[2]] A property is a pair of a getter and a setter method.

  [[3]] The getter method is annotated with instructions on how to convert to and from string representation.

** Example

  The Following example defines one string property on a pojo class called BasicRecord

+---
@Record
public class BasicRecord {

  public String stringData;

  @Field(offset = 1, length = 10)
  public String getStringData() {
    return stringData;
  }

  public void setStringData(String stringData) {
    this.stringData = stringData;
  }
}
+---

* Annotations

** @Record

  Used on classes notifying the manager that the class can be loaded and exported into a string.

** @Field

  Used on getter methods contains general instructions on how to format and parse the data.

** @FixedFormatNumber

  Used on getter methods describing if and how a number is signed

** @FixedFormatDecimal

  Used on getter methods containing instructions for a decimal number.

** @FixedFormatPattern

  Used on getter methods containing a pattern attribute. Used to describe how a date is to be parsed.

** @FixedFormatBoolean

  Used on getter methods containing instructions on how a boolean is handled.